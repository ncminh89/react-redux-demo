import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../store';
import { Phase } from './components/types/phase.interface';
import { fetchPhase, fetchPhases } from './phase.api';

export interface PhaseState {
    phases: Phase[],
    currentPhase: Phase | null,
    status: 'idle' | 'loading' | 'failed';
}

const initialState: PhaseState = {
    phases: [],
    currentPhase: null,
    status: 'idle',
};

export const fetchAllPhases = createAsyncThunk(
    'phase/fetchAllPhases',
    async () => {
        console.log("fetch all phases")
        const response: any = await fetchPhases();
        return response.data as Phase[];
    }
);

export const fetchOnePhase = createAsyncThunk(
    'phase/fetchOnePhases',
    async (id: string) => {
        const response: any = await fetchPhase(id);
        console.log(response)
        return response.data as Phase;
    }
);

export const phaseSlice = createSlice({
    name: 'phase',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchAllPhases.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchAllPhases.fulfilled, (state, action) => {
                state.status = 'idle';
                state.phases = action.payload;
            })
            .addCase(fetchOnePhase.pending, (state) => {
                state.status = "loading";
            })
            .addCase(fetchOnePhase.fulfilled, (state, action) => {
                state.status = "idle";
                state.currentPhase = action.payload;
            })
            ;
    },
});

export const selectAllPhases = (state: RootState) => state.phase.phases
export const selectCurrentPhase = (state: RootState) => state.phase.currentPhase
export const selectPhaseStatus = (state: RootState) => state.phase.status

// export const { } = phaseSlice.actions;

export default phaseSlice.reducer;
